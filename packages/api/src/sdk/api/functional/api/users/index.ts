/**
 * @packageDocumentation
 * @module api.functional.api.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection } from "@nestia/fetcher";

import type { CreateUser } from "./../../../../../../../contract/dist/users/commands/CreateUser";
import type { UserView } from "./../../../../../../../contract/dist/users/views/UserView";

/**
 * 유저를 생성한다.
 * 
 * @param command 생성할 유저 정보
 * @returns 생성한 유저 정보
 * 
 * @controller UserController.createUser()
 * @path POST /api/users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function createUser(
    connection: IConnection,
    command: CreateUser,
): Promise<createUser.Output> {
    return Fetcher.fetch(
        {
            ...connection,
            headers: {
                ...(connection.headers ?? {}),
                "Content-Type": "application/json",
            },
        },
        createUser.ENCRYPTED,
        createUser.METHOD,
        createUser.path(),
        command,
    );
}
export namespace createUser {
    export type Input = CreateUser;
    export type Output = UserView;

    export const METHOD = "POST" as const;
    export const PATH: string = "/api/users";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 201,
    };

    export const path = (): string => {
        return `/api/users`;
    }
}

/**
 * 유저를 가져온다.
 * 
 * @param userId 가져올 유저의 id
 * @returns 유저 정보
 * 
 * @controller UserController.getUser()
 * @path GET /api/users/:userId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUser(
    connection: IConnection,
    userId: string,
): Promise<getUser.Output> {
    return Fetcher.fetch(
        connection,
        getUser.ENCRYPTED,
        getUser.METHOD,
        getUser.path(userId),
    );
}
export namespace getUser {
    export type Output = UserView;

    export const METHOD = "GET" as const;
    export const PATH: string = "/api/users/:userId";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export const path = (userId: string): string => {
        return `/api/users/${encodeURIComponent(userId ?? "null")}`;
    }
}

/**
 * 모든 유저 정보를 가져온다.
 * 
 * @returns 유저 정보 리스트
 * 
 * @controller UserController.getUsers()
 * @path GET /api/users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getUsers(
    connection: IConnection,
): Promise<getUsers.Output> {
    return Fetcher.fetch(
        connection,
        getUsers.ENCRYPTED,
        getUsers.METHOD,
        getUsers.path(),
    );
}
export namespace getUsers {
    export type Output = Array<UserView>;

    export const METHOD = "GET" as const;
    export const PATH: string = "/api/users";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
        status: 200,
    };

    export const path = (): string => {
        return `/api/users`;
    }
}